// Copyright (C) 2017 go-nebulas authors
//
// This file is part of the go-nebulas library.
//
// the go-nebulas library is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// the go-nebulas library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with the go-nebulas library.  If not, see <http://www.gnu.org/licenses/>.
//

syntax = "proto3";

import "google/api/annotations.proto";

package rpcpb;

// RPC API interface.
service ApiService {
    // Return the state of the neb.
    rpc GetNebState (NonParamsRequest) returns (GetNebStateResponse) {
        option (google.api.http) = {
            get: "/v1/user/nebstate"
        };
    }

    // Return the p2p node info.
    rpc NodeInfo (NonParamsRequest) returns (NodeInfoResponse) {
        option (google.api.http) = {
            get: "/v1/user/nodeinfo"
        };
    }

    // Return the dump info of blockchain.
    rpc BlockDump (BlockDumpRequest) returns (BlockDumpResponse) {
        option (google.api.http) = {
            post: "/v1/user/blockdump"
            body: "*"
        };
    }

    // Return the latest irreversible block.
    rpc LatestIrreversibleBlock (NonParamsRequest) returns (BlockResponse) {
        option (google.api.http) = {
            get: "/v1/user/lib"
        };
    }

    // Accounts return account list.
    rpc Accounts (NonParamsRequest) returns (AccountsResponse) {
        option (google.api.http) = {
            get: "/v1/user/accounts"
        };
    }

    // Return the state of the account.
    rpc GetAccountState (GetAccountStateRequest) returns (GetAccountStateResponse) {
        option (google.api.http) = {
            post: "/v1/user/accountstate"
            body: "*"
        };
    }

	// Verify, sign, and send the transaction.
	rpc SendTransaction (TransactionRequest) returns (SendTransactionResponse) {
		option (google.api.http) = {
            post: "/v1/user/transaction"
            body: "*"
        };
    }

    // Call smart contract.
    rpc Call (TransactionRequest) returns (CallResponse) {
        option (google.api.http) = {
            post: "/v1/user/call"
            body: "*"
        };
    }

	// Submit the signed transaction.
	rpc SendRawTransaction (SendRawTransactionRequest) returns (SendTransactionResponse) {
		option (google.api.http) = {
            post: "/v1/user/rawtransaction"
            body: "*"
        };
    }

    // Get block info by the block hash.
    rpc GetBlockByHash (GetBlockByHashRequest) returns (BlockResponse) {
        option (google.api.http) = {
            post: "/v1/user/getBlockByHash"
            body: "*"
        };
    }

    // Get block info by the block height.
    rpc GetBlockByHeight (GetBlockByHeightRequest) returns (BlockResponse) {
        option (google.api.http) = {
            post: "/v1/user/getBlockByHeight"
            body: "*"
        };
    }

    // Get transactionReceipt info by tansaction hash.
    rpc GetTransactionReceipt (GetTransactionByHashRequest) returns (TransactionResponse) {
        option (google.api.http) = {
            post: "/v1/user/getTransactionReceipt"
            body: "*"
        };
    }

    // Subscribe message
    rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse) {
        option (google.api.http) = {
            post: "/v1/user/subscribe"
            body: "*"
        };
    }

    // Get GasPrice
    rpc GetGasPrice(NonParamsRequest) returns (GasPriceResponse) {
        option (google.api.http) = {
            get: "/v1/user/getGasPrice"
        };
    }

    // EstimateGas
    rpc EstimateGas(TransactionRequest) returns (GasResponse) {
        option (google.api.http) = {
            post: "/v1/user/estimateGas"
            body: "*"
        };
    }

    // Get GasUsed
    rpc GetGasUsed(HashRequest) returns (GasResponse) {
        option (google.api.http) = {
            post: "/v1/user/getGasUsed"
            body: "*"
        };
    }

    rpc GetEventsByHash(HashRequest) returns (EventsResponse) {
        option (google.api.http) = {
            post: "/v1/user/getEventsByHash"
            body: "*"
        };
    }

    rpc GetDynasty (ByBlockHeightRequest) returns (GetDynastyResponse) {
        option (google.api.http) = {
            post: "/v1/user/dynasty"
            body: "*"
        };
    }

}

service AdminService {
// NewAccount create a new account with passphrase
    rpc NewAccount(NewAccountRequest) returns (NewAccountResponse) {
        option (google.api.http) = {
            post: "/v1/admin/account/new"
            body: "*"
        };
    }

    // UnlockAccount unlock account with passphrase
    rpc UnlockAccount(UnlockAccountRequest) returns (UnlockAccountResponse) {
        option (google.api.http) = {
            post: "/v1/admin/account/unlock"
            body: "*"
        };
    }

    // LockAccount lock account
    rpc LockAccount(LockAccountRequest) returns (LockAccountResponse) {
        option (google.api.http) = {
            post: "/v1/admin/account/lock"
            body: "*"
        };
    }

    // Sign sign transaction
    rpc SignTransaction(TransactionRequest) returns (SignTransactionResponse) {
        option (google.api.http) = {
            post: "/v1/admin/sign"
            body: "*"
        };
    }

    // SendTransactionWithPassphrase send transaction with passphrase
    rpc SendTransactionWithPassphrase(SendTransactionPassphraseRequest) returns (SendTransactionPassphraseResponse) {
        option (google.api.http) = {
            post: "/v1/admin/transactionWithPassphrase"
            body: "*"
        };
    }

    rpc StatisticsNodeInfo (NonParamsRequest) returns (StatisticsNodeInfoResponse) {
        option (google.api.http) = {
            get: "/v1/admin/statistics/nodeInfo"
        };
	}
	
	rpc GetDynasty (ByBlockHeightRequest) returns (GetDynastyResponse) {
		option (google.api.http) = {
            post: "/v1/admin/dynasty"
            body: "*"
		};
    }

    rpc GetCandidates (ByBlockHeightRequest) returns (GetCandidatesResponse) {
		option (google.api.http) = {
            post: "/v1/admin/candidates"
            body: "*"
		};
    }
    
	rpc GetDelegateVoters (GetDelegateVotersRequest) returns (GetDelegateVotersResponse) {
		option (google.api.http) = {
            post: "/v1/admin/delegateVoters"
            body: "*"
		};
	}    

    rpc ChangeNetworkID (ChangeNetworkIDRequest) returns (ChangeNetworkIDResponse) {
		option (google.api.http) = {
			post: "/v1/admin/changeNetworkID"
            body: "*"
		};
	}

    rpc StartMining (StartMiningRequest) returns (MiningResponse) {
        option (google.api.http) = {
			post: "/v1/admin/startMining"
            body: "*"
		};
    }

    rpc StopMining (NonParamsRequest) returns (MiningResponse) {
        option (google.api.http) = {
			get: "/v1/admin/stopMining"
		};
    }

    rpc StartPprof (PprofRequest) returns (PprofResponse) {
        option (google.api.http) = {
			post: "/v1/admin/pprof"
			body: "*"
		};
    }

}

// Request message of Subscribe rpc
message SubscribeRequest {
    repeated string topics = 1;
}

// Request message of Subscribe rpc
message SubscribeResponse {
    string topic = 1;
    string data = 2;
}

// Request message of non params.
message NonParamsRequest {
}

// Response message of node info.
message NodeInfoResponse {
    // the node ID.
    string id = 1;

    // the block chainID.
    uint32 chain_id  = 2;

    // the node version.
    uint32 version = 3;

    // Number of peers currenly connected.
    uint32 peer_count = 4;

    // the node synchronized status.
    bool synchronized = 5;

    // the node route table bucket size.
    int32 bucket_size = 6;

    // the node relay cache size.
    int32 relay_cache_size = 7;

    // the node stream store size.
    int32 stream_store_size = 8;

    // the node stream store extend size.
    int32 stream_store_extend_size = 9;

    // the network protocol version.
    string protocol_version = 10;

    repeated RouteTable route_table = 11;
}

message StatisticsNodeInfoResponse {
    string NodeID = 1;
    uint64 Height = 2;
    string Hash = 3;
    uint32 PeerCount = 4;
}

message RouteTable {
    string id = 1;
    repeated string address = 2;
}

// Response message of GetNebState rpc.
message GetNebStateResponse {

    // Block chain id
    uint32 chain_id = 1;

    // Current neb tail hash
    string tail = 2;

    // Current neb tail block height
    uint64 height = 3;

    // Neb coinbase
    string coinbase = 4;

    // Number of peers currenly connected
    uint32 peer_count = 5;

    // Neb mine status, minging is true ,otherwise false
    bool is_mining = 6;

    // The current neb protocol version.
    string protocol_version = 7;

    // The peer sync status.
    bool synchronized = 8;

    // neb version
    string version = 9;
}

// Response message of Accounts rpc.
message AccountsResponse {
    // Account list
    repeated string addresses = 1;
}

// Request message of GetAccountState rpc.
message GetAccountStateRequest {
    // Hex string of the account addresss.
    string address = 1;

    // block account state with height. If not specified, use 0 as tail height.
    uint64 height = 2;
}

// Response message of GetAccountState rpc.
message GetAccountStateResponse {
    // Current balance in unit of 1/(10^18) nas.
    string balance = 1; // uint128, len=16

    // Current transaction count.
    string nonce = 2;
}

// Response message of Call rpc.
message CallResponse {
    // result of smart contract method call.
    string result = 1;
}

// ByBlockHeightRequest message
message ByBlockHeightRequest {
    uint64 height = 1;
}

// GetCandidatesRequest message
message GetCandidatesResponse {
    repeated string candidates = 1;
}

// Response message of GetDynastyRequest rpc
message GetDynastyResponse {
	repeated string delegatees = 1;
}	

// Response message of GetDelegateVoters rpc
message GetDelegateVotersRequest {
    string delegatee = 1;
    uint64 height = 2;
}	

// Response message of GetDelegateVoters rpc
message GetDelegateVotersResponse {
	repeated string voters = 1;
}	

// Request message of SendTransaction rpc.
message TransactionRequest {
	// Hex string of the sender account addresss.
	string from = 1;

    // Hex string of the receiver account addresss.
    string to = 2;

    // Amount of value sending with this transaction.
    string value = 3; // uint128, len=16

    // Transaction nonce.
    uint64 nonce = 4;

	// gasPrice sending with this transaction.
	string gas_price = 5; // uint128, len=16

	// gasLimit sending with this transaction.
	string gas_limit = 6; // uint128, len=16

	// contract sending with this transaction
	ContractRequest contract = 7;

	// candidate application sending with this transaction.
	CandidateRequest candidate = 8;

	// delegate vote sending with this transaction.	
	DelegateRequest delegate = 9;
}

message ContractRequest {
	// contract source code.
	string source = 1;

	// contract source type, support javascript and typescript
	string source_type = 2;

	// call contract function name
	string function = 3;

	// the params of contract.
	string args = 4;
}

message CandidateRequest {
	// candidate action.
	string action = 1;
}


message DelegateRequest {
	// delegate action.
	string action = 1;

	// delegatee.
	string delegatee = 2;
}

// Request message of SendRawTransactionRequest rpc.
message SendRawTransactionRequest {

    // Signed data of transaction
    bytes data = 1;
}

// Response message of SendTransaction rpc.
message SendTransactionResponse {
    // Hex string of transaction hash.
    string txhash = 1;
    string contract_address = 2;
    bool result = 3;
}

// Request message of GetBlockByHash rpc.
message GetBlockByHashRequest {
    // Hex string of block hash.
    string hash = 1;

    // If true it returns the full transaction objects, if false only the hashes of the transactions.
    bool full_transaction = 2;
}

// Request message of GetBlockByHeight rpc.
message GetBlockByHeightRequest {
    // block height.
    uint64 height = 1;

    // If true it returns the full transaction objects, if false only the hashes of the transactions.
    bool full_transaction = 2;
}

// Request message of GetTransactionByHash rpc.
message GetTransactionByHashRequest {
    // Hex string of transaction hash.
    string hash = 1;
}

// Request message of BlockDump.
message BlockDumpRequest {
    // the count of blocks to dump before current tail.
    int32 count = 1;
}

// Response message of BlockDump.
message BlockDumpResponse {
    // block dump info.
    string data = 1;
}

// Response message of Block.
message BlockResponse {

    // Hex string of block hash.
    string hash = 1;

    // Hex string of block parent hash.
    string parent_hash = 2;

    // block height
    uint64 height = 3;

    // block nonce
    uint64 nonce = 4;

    // Hex string of coinbase address.
    string coinbase = 5;

    // Hex string of miner address.
    string miner = 6;

    // block timestamp.
    int64 timestamp = 7;

    // block chain id
    uint32 chain_id = 8;

    // Hex string of state root.
    string state_root = 11;

    // Hex string of txs root.
    string txs_root = 12;

    // Hex string of event root.
    string events_root = 13;

    // dpos context
    DposContext dpos_context = 14;

    // transaction slice
    repeated TransactionResponse transactions = 100;
}

// dpos context
message DposContext {

    // dynasty root
    string dynasty_root = 1;

    // next dynasty
    string next_dynasty_root = 2;

    // delegate root
    string delegate_root = 3;

    // candidate root
    string candidate_root = 4;

    // vote root
    string vote_root = 5;

    // mint cnt root
    string mint_cnt_root = 6;
}

// Response message of TransactionReceipt.
message TransactionResponse {

    // Hex string of tx hash.
    string hash = 1;

    uint32 chainId = 2;

    // Hex string of the sender account addresss.
    string from = 3;

    // Hex string of the receiver account addresss.
    string to = 4;

    string value = 5;

    // Transaction nonce.
    uint64 nonce = 6;

    int64 timestamp = 7;

    string type = 8;

    bytes data = 9;

    string gas_price = 10;

    string gas_limit = 11;

    string contract_address = 12;

    // transaction status 0 failed, 1 success, 2 pending
    uint32 status = 13;

    // transaction gas used
    string gas_used = 14;
}

message NewAccountRequest {
    string passphrase = 1;
}

message NewAccountResponse {
    string address = 1;
}

message UnlockAccountRequest {
    string address = 1;
    string passphrase = 2;
    uint64 duration = 3;
}

message UnlockAccountResponse {
    bool result = 1;
}

message LockAccountRequest {
    string address = 1;
}

message LockAccountResponse {
    bool result = 1;
}

message SignTransactionResponse {
    bytes data = 1;
}

message SendTransactionPassphraseRequest {
	// transaction struct
	TransactionRequest transaction = 1;

    // from account passphrase
    string passphrase = 2;
}

message SendTransactionPassphraseResponse {
    // Hex string of transaction hash.
    string hash = 1;
}

message GasPriceResponse {
    string gas_price = 1;
}

// Request message of GetTransactionByHash rpc.
message HashRequest {
    // Hex string of block/transaction hash.
    string hash = 1;
}

message GasResponse {
    string gas = 1;
}

message EventsResponse {
   repeated Event events = 1;
}

message Event {
    string topic = 1;
    string data = 2;
}

// Request message of change networkID.
message ChangeNetworkIDRequest {
    uint32 network_id = 1;
}

// Response message of change networkID.
message ChangeNetworkIDResponse {
    bool result = 1;
}

message StartMiningRequest {
    // miner address passphrase
    string passphrase = 1;
}

message MiningResponse {
    bool result = 1;
}

message PprofRequest {
    string listen = 1;
}

message PprofResponse {
    bool result = 1;
}

