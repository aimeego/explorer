<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.nebulas.explorer.mapper.NebPendingTransactionMapper">
    <resultMap id="BaseResultMap" type="NebPendingTransaction">
        <result column="hash" property="hash" jdbcType="VARCHAR"/>
        <result column="from" property="from" jdbcType="VARCHAR"/>
        <result column="to" property="to" jdbcType="VARCHAR"/>
        <result column="value" property="value" jdbcType="VARCHAR"/>
        <result column="nonce" property="nonce" jdbcType="BIGINT"/>
        <result column="timestamp" property="timestamp" jdbcType="TIMESTAMP"/>
        <result column="type" property="type" jdbcType="TINYINT"/>
        <result column="data" property="data" jdbcType="VARCHAR"/>
        <result column="gas_price" property="gasPrice" jdbcType="VARCHAR"/>
        <result column="gas_limit" property="gasLimit" jdbcType="VARCHAR"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="contract_address" property="contractAddress" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
      `hash`,
      `from`,
      `to`,
      `value`,
      `nonce`,
      `timestamp`,
      `type`,
      `data`,
      `contract_address`,
      `gas_price`,
      `gas_limit`,
      `created_at`
    </sql>

    <insert id="add" parameterType="NebPendingTransaction" useGeneratedKeys="false">
        INSERT INTO `neb_pending_transaction` (`hash`, `from`, `to`, `value`, `nonce`, `timestamp`, `type`, `data`, `contract_address`, `gas_price`, `gas_limit`, `created_at`)
        VALUES
        (#{hash}, #{from}, #{to}, #{value}, #{nonce}, #{timestamp}, #{type}, #{data}, #{contractAddress}, #{gasPrice}, #{gasLimit}, #{createdAt})
    </insert>

    <delete id="delete" parameterType="java.lang.String">
        DELETE FROM `neb_pending_transaction` WHERE `hash` = #{hash}
    </delete>

    <delete id="deleteByTimestamp" parameterType="map">
        DELETE FROM `neb_pending_transaction`
        <![CDATA[
        WHERE `timestamp` < #{timestamp,jdbcType=TIMESTAMP}
        ]]>
    </delete>

    <select id="countPendingTxnCntByCondition" parameterType="java.lang.String" resultType="java.lang.Long">
        SELECT count(1)
        FROM `neb_pending_transaction`
        <if test="addressHash !=null">
            WHERE `from` = #{addressHash,jdbcType=VARCHAR} OR `to` = #{addressHash,jdbcType=VARCHAR}
        </if>
    </select>

    <select id="countPendingContractTransaction" parameterType="java.lang.String" resultType="java.lang.Long">
        SELECT count(1)
        FROM `neb_pending_transaction`
        WHERE `to` = #{contract,jdbcType=VARCHAR} and type='call'
    </select>

    <select id="getByHash" resultType="NebPendingTransaction" parameterType="java.lang.String">
        SELECT
        <include refid="Base_Column_List"/>
        FROM `neb_pending_transaction`
        WHERE `hash` = #{hash,jdbcType=VARCHAR}
    </select>

    <select id="findPendingTxnByCondition" parameterType="map" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM `neb_pending_transaction`
        <if test="addressHash != null">
        WHERE `from` = #{addressHash,jdbcType=VARCHAR} or `to` = #{addressHash,jdbcType=VARCHAR}
        </if>
        ORDER BY `timestamp` DESC
        LIMIT ${offset},${limit}
    </select>

    <select id="findPendingContractTransactions" parameterType="map" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM `neb_pending_transaction`
        WHERE `to` = #{contract,jdbcType=VARCHAR} and type='call'
        ORDER BY `timestamp` DESC
        LIMIT ${offset},${limit}
    </select>

    <select id="findLessThanTimestamp" parameterType="map" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM `neb_pending_transaction`
        <![CDATA[
        WHERE `timestamp` < #{timestamp,jdbcType=TIMESTAMP}
        ]]>
        ORDER BY `timestamp` ASC
        LIMIT ${limit}
    </select>

</mapper>