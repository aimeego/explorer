<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.nebulas.explorer.mapper.NebTransactionMapper">
    <resultMap id="BaseResultMap" type="NebTransaction">
        <result column="hash" property="hash" jdbcType="VARCHAR"/>
        <result column="block_height" property="blockHeight" jdbcType="BIGINT"/>
        <result column="block_hash" property="blockHash" jdbcType="VARCHAR"/>
        <result column="tx_seq" property="txSeq" jdbcType="INTEGER"/>
        <result column="from" property="from" jdbcType="VARCHAR"/>
        <result column="to" property="to" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="value" property="value" jdbcType="VARCHAR"/>
        <result column="nonce" property="nonce" jdbcType="BIGINT"/>
        <result column="timestamp" property="timestamp" jdbcType="TIMESTAMP"/>
        <result column="type" property="type" jdbcType="TINYINT"/>
        <result column="data" property="data" jdbcType="VARCHAR"/>
        <result column="gas_price" property="gasPrice" jdbcType="VARCHAR"/>
        <result column="gas_limit" property="gasLimit" jdbcType="VARCHAR"/>
        <result column="gas_used" property="gasUsed" jdbcType="VARCHAR"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="contract_address" property="contractAddress" jdbcType="VARCHAR"/>
        <result column="execute_error" property="executeError" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
      `hash`,
      `block_hash`,
      `block_height`,
      `tx_seq`,
      `from`,
      `to`,
      `status`,
      `value`,
      `nonce`,
      `timestamp`,
      `type`,
      `data`,
      `contract_address`,
      `gas_price`,
      `gas_limit`,
      `gas_used`,
      `created_at`,
      `execute_error`
    </sql>

    <insert id="addNebTransaction" parameterType="NebTransaction" useGeneratedKeys="false">
        replace INTO `neb_transaction` (`hash`, `block_hash`, `block_height`, `tx_seq`, `from`, `to`, `status`, `value`,`nonce`, `timestamp`, `type`, `data`, `contract_address`, `gas_price`, `gas_limit`, `gas_used`, `created_at`, `execute_error`)
        VALUES
        (#{hash}, #{blockHash}, #{blockHeight}, #{txSeq}, #{from}, #{to}, #{status}, #{value}, #{nonce}, #{timestamp}, #{type}, #{data}, #{contractAddress}, #{gasPrice}, #{gasLimit}, #{gasUsed}, #{createdAt}, #{executeError})
    </insert>

    <delete id="deleteByBlkHeight" parameterType="map">
        DELETE FROM `neb_transaction` WHERE block_height = #{blockHeight,jdbcType=BIGINT}
    </delete>

    <select id="countTxnCntByCondition" parameterType="map" resultType="java.lang.Long">
        SELECT count(1)
        FROM `neb_transaction`
        <where>
            <trim prefixOverrides="and">
                <if test="blockHeight !=null">
                    and block_height = #{blockHeight,jdbcType=BIGINT}
                </if>
                <if test="addressHash !=null">
                    and (`from` = #{addressHash,jdbcType=VARCHAR} or `to` = #{addressHash,jdbcType=VARCHAR})
                </if>
            </trim>
        </where>
    </select>

    <select id="countContractTransfer" parameterType="java.lang.String" resultType="java.lang.Long">
        SELECT count(1)
        FROM `neb_transaction`
        WHERE `to` = #{contract,jdbcType=VARCHAR}
    </select>

    <select id="countTxnCntByFromTo" parameterType="java.lang.String" resultType="java.lang.Long">
        SELECT count(1)
        FROM `neb_transaction`
        WHERE `from` = #{addressHash,jdbcType=VARCHAR} or `to` = #{addressHash,jdbcType=VARCHAR}
    </select>

    <select id="countNrc20TxnCntByFromAndTo" parameterType="java.lang.String" resultType="java.lang.Long">
        SELECT count(1)
        FROM `neb_transaction`
        WHERE `from` = #{addressHash,jdbcType=VARCHAR} or `to` = #{addressHash,jdbcType=VARCHAR} AND type = 'call'
    </select>

    <select id="countTxnCntByFromAndTo" parameterType="map" resultType="java.lang.Long">
        SELECT count(1)
        FROM `neb_transaction`
        WHERE `from` = #{from,jdbcType=VARCHAR} and `to` = #{to,jdbcType=VARCHAR}
    </select>

    <select id="countTxnCntByBlockHeight" parameterType="java.lang.Long" resultType="java.lang.Long">
         SELECT count(1)
        FROM `neb_transaction`
        WHERE block_height = #{blockHeight,jdbcType=BIGINT}
    </select>

    <select id="getByHash" resultType="NebTransaction" parameterType="java.lang.String">
        SELECT
        <include refid="Base_Column_List"/>
        FROM `neb_transaction`
        WHERE `hash` = #{hash,jdbcType=VARCHAR}
    </select>

    <select id="getByContractAddress" resultType="NebTransaction" parameterType="java.lang.String">
        SELECT
        <include refid="Base_Column_List"/>
        FROM `neb_transaction`
        WHERE `contract_address` = #{contractAddress,jdbcType=VARCHAR}
        LIMIT 1
    </select>

    <select id="findTxnByBlockHeight" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM `neb_transaction`
        WHERE block_height = #{blockHeight,jdbcType=BIGINT}
        ORDER BY `tx_seq` DESC
    </select>

    <select id="findTxnByCondition" parameterType="map" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM `neb_transaction`
        <where>
            <trim prefixOverrides="and">
                <if test="blockHeight !=null">
                    and block_height = #{blockHeight,jdbcType=BIGINT}
                </if>
                <if test="addressHash !=null">
                    and (`from` = #{addressHash,jdbcType=VARCHAR} or `to` = #{addressHash,jdbcType=VARCHAR})
                </if>
            </trim>
        </where>
        ORDER BY `block_height` DESC,`tx_seq` DESC
        LIMIT ${offset},${limit}
    </select>

    <select id="findContractTransactions" parameterType="map" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM `neb_transaction`
        WHERE `to` = #{contract,jdbcType=VARCHAR}
        and type='call'
        ORDER BY `block_height` DESC,`tx_seq` DESC
        LIMIT ${offset},${limit}
    </select>

    <select id="findTxnByFromTo" parameterType="map" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM `neb_transaction`
        WHERE `from` = #{addressHash,jdbcType=VARCHAR} or `to` = #{addressHash,jdbcType=VARCHAR}
        ORDER BY `block_height` DESC,`tx_seq` DESC
        LIMIT ${offset},${limit}
    </select>

    <select id="findTxnByFromToAndCall" parameterType="map" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM `neb_transaction`
        WHERE `from` = #{addressHash,jdbcType=VARCHAR} and `to` = #{contractAddress,jdbcType=VARCHAR} AND `type` = 'call'
        ORDER BY `block_height` DESC,`tx_seq` DESC
    </select>

    <select id="findTxnByContract" parameterType="map" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM `neb_transaction`
        WHERE (`from` = #{contractAddress,jdbcType=VARCHAR} or `to` = #{contractAddress,jdbcType=VARCHAR}) AND `type` = 'call'
        ORDER BY `block_height` DESC,`tx_seq` DESC
    </select>


    <select id="findTxnOrderById" parameterType="map" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM `neb_transaction`
        ORDER BY `block_height` DESC,`tx_seq` DESC
        LIMIT ${offset},${limit}
    </select>

    <select id="findByBlockHeights" resultType="map" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM `neb_transaction`
        WHERE block_height IN
        <foreach collection="blockHeights" item="item" open="(" close=")" separator=",">
            #{item,jdbcType=BIGINT}
        </foreach>
    </select>

    <select id="countTxnInBlock" parameterType="map" resultType="io.nebulas.explorer.domain.BlockSummary">
        select
        block_height as blockHeight,
        count(1) as txCnt,
        sum(cast(gas_used as SIGNED)) as gasUsed,
        sum(cast(gas_limit as SIGNED)) as gasLimit,
        sum(cast(gas_price as SIGNED))/count(1) as avgGasPrice
        from neb_transaction
        where block_height in
        <foreach collection="blockHeights" item="item" open="(" close=")" separator=",">#{item,jdbcType=BIGINT}
        </foreach>
        GROUP BY `block_height`
    </select>

    <select id="countTxnCntMapByFrom" parameterType="map" resultType="map">
        SELECT `from`, count(1) as cnt
        FROM `neb_transaction`
        WHERE `from` in
        <foreach collection="list" item="item" open="(" close=")" separator=",">#{item,jdbcType=VARCHAR}</foreach>
        GROUP BY `from`
    </select>

    <select id="countTxnCntMapByTo" parameterType="map" resultType="java.util.Map">
        SELECT `to`, count(1) as cnt
        FROM `neb_transaction`
        WHERE `to` in
        <foreach collection="list" item="item" open="(" close=")" separator=",">#{item,jdbcType=VARCHAR}</foreach>
        GROUP BY `to`
    </select>

    <select id="countTxCntGroupByTimestamp" parameterType="map" resultType="java.util.Map">
        SELECT
          LEFT(`timestamp`,10) AS `ts`,
          COUNT(1) AS `cnt`
        FROM `neb_transaction`
        WHERE `timestamp` BETWEEN #{from,jdbcType=TIMESTAMP} and #{to,jdbcType=TIMESTAMP}
        GROUP BY LEFT(`timestamp`,10)
    </select>
    <select id="countTotalTxnCnt" resultType="java.lang.Long">
        SELECT
          COUNT(1)
        FROM `neb_transaction`;
    </select>
</mapper>